[Golang] Largest Product in a Series - Problem 8 - Project Euler
################################################################

:date: 2017-06-12T22:55+08:00
:tags: Go, Golang, Math, Project Euler, Type Casting, Type Conversion,
       String Manipulation
:category: Go
:summary: Go solution to largest product in a series
          - Problem 8 - Project Euler.
:og_image: https://4.bp.blogspot.com/-eFrfsvXskkA/WLFl8qVyTeI/AAAAAAAABDc/MmfP84F9wHMUh5sL4YpYaO7soS3nwnsNQCLcB/s1600/project-euler-problem-8-solution-in-java.jpg
:adsu: yes

Go solution to largest product in a series - Problem 8 - Project Euler. [1]_

**Problem**:

  The four adjacent digits in the 1000-digit number that have the greatest
  product are :math:`9 × 9 × 8 × 9 = 5832`.

  73167176531330624919225119674426574742355349194934
  96983520312774506326239578318016984801869478851843
  85861560789112949495459501737958331952853208805511
  12540698747158523863050715693290963295227443043557
  66896648950445244523161731856403098711121722383113
  62229893423380308135336276614282806444486645238749
  30358907296290491560440772390713810515859307960866
  70172427121883998797908792274921901699720888093776
  65727333001053367881220235421809751254540594752243
  52584907711670556013604839586446706324415722155397
  53697817977846174064955149290862569321978468622482
  83972241375657056057490261407972968652414535100474
  82166370484403199890008895243450658541227588666881
  16427171479924442928230863465674813919123162824586
  17866458359124566529476545682848912883142607690042
  24219022671055626321111109370544217506941658960408
  07198403850962455444362981230987879927244284909188
  84580156166097919133875499200524063689912560717606
  05886116467109405077541002256983155200055935729725
  71636269561882670428252483600823257530420752963450

  Find the thirteen adjacent digits in the 1000-digit number that have the
  greatest product. What is the value of this product?


**Solution**:

  Index at 197 (index starts from 0)

  5 X 5 X 7 X 6 X 6 X 8 X 9 X 6 X 6 X 4 X 8 X 9 X 5 = 23514624000

  If you use *int* type, integer overflow will happen. Use *int64* instead.

.. rubric:: `Run Code on Go Playground <https://play.golang.org/p/UywVL7NpC2>`__
   :class: align-center

.. code-block:: go

  package main

  import (
  	"fmt"
  	"strconv"
  )

  func Get1000Digits() (digits []int64) {
  	num1000 := ``
  	for _, runeValue := range num1000 {
  		i, err := strconv.ParseInt(string(runeValue), 10, 0)
  		if err != nil {
  			panic(err)
  		}
  		digits = append(digits, i)
  	}
  	return
  }

  func AdjacentDigitsProduct(index, howMany int64, digits []int64) int64 {
  	product := int64(1)
  	for i := int64(0); i < howMany; i++ {
  		product *= digits[index+i]
  	}
  	return product
  }

  func main() {
  	digits := Get1000Digits()
  	var max, index int64 = 0, 0
  	for i := int64(0); i < int64(len(digits)-13); i++ {
  		product := AdjacentDigitsProduct(i, 13, digits)
  		if product > max {
  			max = product
  			index = i
  		}
  	}
  	fmt.Print("Index at ")
  	fmt.Println(index)
  	for i := int64(0); i < 13; i++ {
  		fmt.Print(digits[index+i])
  		if i != 12 {
  			fmt.Print(" X ")
  		}
  	}
  	fmt.Print(" = ")
  	fmt.Println(max)
  }

.. adsu:: 2

Tested on: `Go Playground`_

----

References:

.. [1] `Largest product in a series - Problem 8 - Project Euler <https://projecteuler.net/problem=8>`_
.. [2] `[Golang] Iterate Over UTF-8 Strings (non-ASCII strings) <{filename}../../../2016/02/03/go-iterate-over-utf8-non-ascii-string%en.rst>`_
.. [3] `[Golang] Type Conversion between String and Integer <{filename}../../04/14/go-string-int-type-casting%en.rst>`_

.. _Go: https://golang.org/
.. _Golang: https://golang.org/
.. _Go Playground: https://play.golang.org/
